name: CMake build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [clang]
        cpp_compiler: [clang++]
        include:
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT";
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT;
    
    - name: Cache CMake dependency source code
      uses: actions/cache@v2
      env:
        cache-name: cache-cmake-dependency-sources
      with:
        path: ${{github.workspace}}/build/_deps/*-src
        key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
        restore-keys: |
          ${{ env.cache-name }}-

    - name: Cache CMake dependency build objects
      uses: actions/cache@v2
      env:
        cache-name: cache-cmake-dependency-builds
      with:
        path: |
          ${{github.workspace}}/build/_deps/*-build
          ${{github.workspace}}/build/_deps/*-subbuild
        key: ${{ env.cache-name }}-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
        restore-keys: |
          ${{ env.cache-name }}-${{ matrix.os }}-${{ matrix.cpp_compiler }}-
            
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -G "MinGW Makefiles"

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.4.3
      with:
        name: Executable
        path: ${{ steps.strings.outputs.build-output-dir }}/frogger.exe

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.strings.outputs.sha_short }}
        release_name: Release ${{ steps.strings.outputs.sha_short }}
        draft: false
        prerelease: false
        body: |
          ## Changes in this release:
          ${{ github.event.head_commit.message }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/frogger.exe
        asset_name: frogger.exe
        asset_content_type: application/octet-stream

